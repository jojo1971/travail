commande executer :
firefox.exe -P  -> pour accéder aux extensions firefox
____

type
rd
cd
cd.. (revient en arri�re)
dir
set (var)____pour afficher var :%x%
regedit
reg /?
print
cls
choice

convert X: /fs:ntfs 
___________
html :
div : margin,border, padding,bottom
_______________
javascript :
manipulation du html :
DOM = document object model.
getElementById()
getElementsByTagName()
getElementsByName()
querySelector()
querySelectorAll()
getAttribute()
setAttribute()
className(pour les classes CSS)
split()
classList.add()
classList.remove()
classList.contain()
classList.toggle()
innerHTML
innerText
innerContent
parentNode
nodeType
nodeName
firstChild
lastChild
firstElementChild(> � IE 9)
lastElementChild(> � IE 9)
nodeValue
data
childNode
nextSibling
previousSibling
nextElementSibling (> � IE 9)
previousElementSibling (> � IE 9)
appendChild
createElement
createTextNode
cloneNode
replaceChild
removeChild
hasChildNodes()
insertBefore
cloneNode(false)  (pour cloner un �l�ment et ne pas avoir � le recr�er)
click
dblclick
mouseover,down,out,up,move
keydown,up,press
keycode
focus
blur
change
input
select
submit
reset
type
target
relatedTarget
keyup_keypress_keydowm_keycode
mousemove
returnFalse
preventDefault
this
className
new
instanceof
myArray[i].work   ->liste d'objet instanci�s
prototype    -> objet.prototype.m�thode => pour créer des méthodes supplémentaires pour des objet natifs.
event
charAt
charCodeAt()
fromCharCode()
String
trim()  =>supprime les espaces
indexOf() (aussi pour un tableau)
lastIndexOf() (aussi pour un tableau)
le tilde : ~
liste des métacaractères : ! ^ $ () [] {} ? + * . / \ |
(regex : /contenu recherché/i => sans la casse.
/contenu | un autre contenu/ => oubien.
/^contenu/ => au début.
/contenu$/ => à la fin.
/gr[oa]s/ => recherche gras et gros.
/gr[o-a]s/ => de a à o.
la classe [a-z0-9] trouvera une lettre et un chiffre.
[^aeiouy] => lettres ignorées idem pour l'interval [^b-y].
/gr.s/ => n'importe quel caractère.
le point (.)trouve les caractères et les espaces blancs hors retour à la ligne,
nombre de fois qu'un caractère peut être rencontré avant :
? => 0 ou 1 fois, + => 1 ou plusieurs fois, * => 0,1 ou plusieurs fois,
{n} => n fois, {n,m} => de n à m fois, {n,} de n à l'infini,
[a-s]{2,3} => lettres rencontrées entre a et b, 2 à 3 fois,
\d => Trouve un caractère décimal (un chiffre)
\D => Trouve un caractère qui n'est pas décimal (donc pas un chiffre)
\s => Trouve un caractère blanc
\S => Trouve un caractère qui n'est pas un caractère blanc
\w => Trouve un caractère « de mot » : une lettre, accentuée ou non, ainsi que l'underscore
\W => Trouve un caractère qui n'est pas un caractère « de mot »
\n => Trouve un retour à la ligne
\t => Trouve une tabulation
\b => Trouve une limite de mot
\B => Ne trouve pas de limite de mot,
/\bcontenu\b/exec => renvoie la partie cherchée elle-même,
RegEx.$1 => pour récupérer contenu d'une parenthèse capture,
/(?:https|http|ftp|steam):\/\// => parenthèses non-capturantes,
/contenu(.+?)/ => jusqu'à rencontrer une fois le caractère >",
contenu.replace(/A/,'B') => remplacer un contenu,
/contenu/g => recherche le contenu autant de fois qu'il apparaît,
/contenu/.search(recherche) => retourne première occurence trouvée,
/contenu/.search(recherche) => retourne toutes les occurences trouvée dans tableau.)
Math.floor/ceil/round => arrondi.
Math.PI => nbre PI
Math.E => nbre d'Euler
Math.pow(3,2) => 3²
Math.sqrt(9) => racine carré = 3.
Math.max/min.
Math.random() => nombre aléatoire entre 0 et 1.
Number.MAX_VALUE/MIN_VALUE/NaN.
setTimeout()
setIneterval()
clearInterval()
clearTimeout()
sort => tri tableau
shift unshift pop push =>les piles (FILO : first in last out), les files(FIFO)utilisée avec shift et unshift(à éviter).
forEach => boucle sur tableau
Image().
load().
document.write() => ecrire du texte.
new Date() => date du jour.
new Date().getDate()ou.getMonth()ou.getHours()ou.getSecondes()....

__________
polyfills => scripts pour la compatibilité des browsers.
les closures => méthode permettant d'isoler l'utilisation d'une variable sur une boucle en fonction du temps.
____________

JSON => javascript object notation
__________________________________
AJAX :Asynchronous Javascript and XML(communication avec le serveur)
XHR = XMLHttpRequest.
GET => envoi de requètes.(les paramètrees de l'URL doivent être encodés avec encodeURIComponent() car elles sont envoyées en UTF-8).
POST => envoi des valeurs contenues dans un formulaire
HEAD => envoi de requète pour avoir juste l'entête d'un fichier.
encodeURIComponent(value) => évite d'écrire des caractères interdits.
open() => préparation de la requète.
abord()=> abandonne l'échange de données.
send() => envoi de la requète.
setRequestHeader() => ajout ou modif d'un en-tête
readystatechange => pour une requète asynchrone, état de changement en 5 étapes : UNSENT(0), OPENED(1), HEADER_RECEIVED(2), LOADING(3), DONE(4).
ex : if(xhr.readyState === 4 && xhr.status === 200){......  => status : tout à été mené à bien.
statusText => statut de la requète en format texte.
responseXML, responseText => propriétés pour le traitement des données reçues.
getAllresponseHeaders() =>retourne tous les en-têtes en vrac.
getResponseHeader() => retourne un seul en-tête.
formData() avec la méthode append('champs','valeur') => envoi de données d'un formulaire sans avoir à soécifeir d'en-tête.
iframe => technique pour réaliser un upload.
callback, windows.top => accéder à la page qui contient l'iframe
DSL => dynamic script loading







________________________________
AJAX :
XMLHttpRequest
_________________________________
XML :
&lt; remplace < ;Pour information, lt signifie « lower than » (plus petit que, <) et gt signifie « greater than » (plus grand que, >).
&gt; remplace > ;
&apos; remplace ' ;
&quot; remplace " ;
&amp; remplace & ;
prologue (optionnel) : <?xml version="1.0" encoding="iso-8859-1"?>.
<![CDATA[ code ]]> => zone de texte contenant des signes(<>'"&), donc pas interprétée.
<!--le commentaire se place ici-->.
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">  =>  espace de nom html,
<math xmlns="http://www.w3.org/1998/Math/MathML"> => espace de nom math.
XSLT/XPath => langage de la base XML pour le style de la mise en page du XML.
XQuery : XML comme base de données => un peu comme SQL mais par Xpath.
XRX =>couplage de langages : XQuery,Rest, XForm, Xml...
DTD et XML Schéma=> schéma de validité d'un code, par ex : <ul> ne peut contenir que <il>.
XHTML => présentation docu web.
svg => dessin vectoriel en 2D.
SMIL => animation déclarative.
XForms => génération de formulaire Web.
WLink => pour les liens.
XMPP => protocole de messagerie instantanée.
_________________________________________________
LINUX
ifconfig
cd => changer de dossier
echo 1 > /proc/sys/net/ipv4/ip_forward => écrit 1 dans le fichier ip_forward
sudo => super utilisateur
sudo su => super utilisateur permanent
chmod => changer les droit sur un fichier
netstat -antp => etat d'un réseau
netstat -antp | grep 92.18.40.22=> etat d'un réseau en isolant la ligne de l'adresse indiquée
_______
credential : cl� de connexion pour une api
MIME : Multipurpose internet mail extensions => standard pour définir un type de document
_________
product pitch: target(cible),pain(souffrance),solution
product/market fit:acquisition( new letters...),activation,revenu,r�tention,referral
built & scale
____________________
Pour git sur la console :
git status
git diff
git add (pour les changements)
git add* (pour tout ajouter)
git commit -m"" (por cr�er un commit avec message)
git branch nom_de la branche (pour cr�er un branche)
git checkout nom_de_la_branche ( pour se placer dessus)
git branch -a (organigramme des branches)
git pull origin master (pour rapatrier les changement sur github.com)
git push origin nom_de_la_branche (envoyer changements)
git add index.html
git commit -m""
git commit --amend ""(pour changer le message)
git br -d nom_de_la_branche (supprimer branche)
git br -D nom_de_la_branche (forcer suppression)

git branch gh-pages (cr�er une branch pour �tre h�berg� par github)
git push origin gh-pages (pour l'envoyer)
____________________
REST : Representationnal state transfert
_________
Symfony 2 :
ORM = object relation mapper (doctrine) : gestion de la base de donnee
MVC = Modéle vue contrôleur = design patterns
DQL = Doctrine Query Language
DRY = Don't Repeat Yourself
Le champ CSRF, pour Cross Site Request Forgeries, permet de vérifier que l'internaute qui valide le formulaire est bien celui qui l'a affiché. C'est un moyen de se protéger des envois de formulaire frauduleux.

pour une redirection dans le constructeur => return $this->redirectToRoute('Route');
pour intercepter une redirection dans le constructeur aller sur app/config/config_dev.yml et mettre intercept_redirects à true
vider le cache : php app/console cache:clear ou php app/console cache:clear --env=prod  (si prob, refaire ou essayer : app/cache/dev ou app/cache/prod)
connaitre la version de symfony : app/console --version
architecture MVC : modèle vue contrôleur
token = clé générée à chaque fois qu'on régenère la page ou le site pour éviter les failles CSRF(par ex : supprimer une image par l'url)
twig =  moteur de template pour Symfony
pour afficher une variqble sans qu'elle soit interprétée par twig (en texte brut) : {{ ma_variable_html|raw }}
Doctrine = bundle de Symfony 2, c'est un ORM(couche d'abstraction pour le traitement base de données)

créer une entité : php app/console doctrine:generate:entity
                    The Entity shortcut name: OCPlatformBundle:Advert
                    New field name (press <return> to stop adding fields): date
                    Field type [string]: datetime
                    New field name (press <return> to stop adding fields): title
                    Field type [string]: string
                    Field length [255]: 255

slug : modifier un champ par un alias : ex : Le chat mange le souris ! => le-chat-mange-la-souris
     - dans l'entité :    /**
     * @Gedmo\Slug(fields={"title"})
     * @ORM\Column(length=128, unique=true)
    */

    private $slug;
    -dans config :stof_doctrine_extensions:
                                        orm:
                                            default:
                                                sluggable: true
     dans constructeur :    public function testAction(){
                                            $advert = new Advert();
                                            $advert->setTitle('Recherche chomeur');
                                            $advert->setAuthor('test');
                                            $advert->setContent('Pour test');

                                            $em = $this->getDoctrine()->getManager();
                                            $em->persist($advert);
                                            $em->flush();

                                            return new Response('Slug généré : '.$advert->getSlug());
                                        }
     dans la console : php app/console doctrine:schema:update --dump-sql (pour verifier les requetes)
                       puis  :php app/console doctrine:schema:update --force


=> créer base : "php app/console doctrine:database:create"+"name = nom du bundle:nom quelconque",
pour créer la table dans la base(ne pas oublier non de la base dans parameters) => "php app/console doctrine:schema:create"

php app/console doctrine:schema:update --dump-sql : Elle va comparer l'état actuel de la base de données avec ce qu'elle devrait être en tenant compte de toutes nos entités.
                                                    Puis, elle affiche les requêtes SQL à exécuter pour passer de l'état actuel au nouvel état.
pour enfin entrer donnees : php app/console doctrine:schema:update --force.

Pour faire une requete à partir de la console : php app/console doctrine:query:dql "SELECT a FROM OCPlatformBundle:Advert a"


pour générer setteurs et getteur :php app/console doctrine:generate:entities UtilisateursBundle:Utilisateurs

<<<<<<< HEAD
générer un formulaire pour une entité = php app/console doctrine:generate:form TutoAnimauxBundle:Animal
=======
générer un formulaire = php app/console doctrine:generate:form TutoAnimauxBundle:Animal (pour créer les fichiers ----Type)
>>>>>>> 858aa539829f8443f19fb68c111203058b6b7e88
mise a jour : compaoser.phar update ou self-update
pour importer fosuser de git : git clone https://github.com/FriendsOfSymfony/FOSUserBundle.git vendor/bundles/FOS/UserBundle
créer un bundle : php app/console generate:bundle
tout ce qui commence par @ = annotation

connaitre tous les chemins : php app/console router:debug
types utilisateurs : php app/console fos    exemple créer une type = fos:user:create   ou changer le rôle = fos:user:promote    puis ROLE_ADMIN
Pour faire interpréter du html d'un contenu : {{ page.contenu|raw }}
Pour une boucle 10X : {% for i in 0..10 %}
getRequest->remplacé par ->get('request')
pour créer un formulaire à partir de l'entité : php app/console generate:doctrine:form EcommerceBundle:UtilisateursAdresses

exemple pour getFlashBag : $this->get('session')->getFlashBag()->add('info', 'Une erreur est survenue');
                           return $this->redirect($this->generateUrl('oc_platform_home_view', array('id'=> 5)));
                           et dans la vue : {% for message in app.session.flashbag.get('info') %}
                                            <p>Message flash : {{ message }}</p>
                                            {% endfor %}
installer un bundle avec le composer : mettre reference dans le require du composer.json puis dans le terminal :  php composer.phar update  // ou composer update
mettre à jour le compser : composer self-update
CRUD : create,read,update,delete
Pour generer un crud => php app/console generate:doctrine:crud
         -> The Entity shortcut name: EcommerceBundle:Produits
         -> Do you want to generate the "write" actions [no]? yes
         ->Configuration format (yml, xml, php, or annotation) [annotation]: yml
         ->Routes prefix [/produits]: adminProduits
         ->yes
         ->yes

pour définir la langue locale mettre dans routing général : ecommerce:
                                                                resource: "@EcommerceBundle/Resources/config/routing.yml"
                                                                prefix:   /{_locale}/

Pour mettre à jour le dossier web après un ajout dans dossier public des bundles : php app/console assets:install web

pour voir tous les passages à tranduire :php app/console translation:update fr EcommerceBundle --dump-messages
pour générer automatiquement le fichier message de traduction : php app/console translation:update fr EcommerceBundle --force


changer la langue : dans config =>  translator:    ~   et dans parameters =>  locale: fr
callback = méthode d'une entité. exemple dans l'entité:     /**
                                                             * @ORM\Column(name="updated_at", type="datetime", nullable=true)
                                                             */
                                                            private $updatedAt;


                                                            /**
                                                             * @ORM\PreUpdate
                                                             */
                                                            public function updateDate(){
                                                                $this->setUpdatedAt(new \DateTime());
                                                            }

Les relations :
relations base de données : one to one : par exemple une image pour un article, many to one : par ex article et commantaires,
many to many : un article pour plusieurs categories mais une categorie peut avoir plusieurs articles aussi,
le bidirectionnel(many to one B) : pour recupérer les commantaires à partir d'un article
Le côté Many est toujours du côté propriétaire.
Pour du bidirectionnel : côté proprietaire : @ORM\ManyToOne(targetEntity="OC\PlatformBundle\Entity\Application", inversedBy="advert")
                                             @ORM\JoinColumn(nullable=false)
                         côté inverse : @ORM\OneToMany(targetEntity="OC\PlatformBundle\Entity\Advert", mappedBy="applications")
                                        @ORM\JoinColumn(nullable=false)

fixtures : tester un base de données avec des données.=>pour entrer les données : php app/console doctrine:fixture:load ____puis Yes.
Si on ne veut pas vider la base de donnée sur un fixtures load =>  php app/console doctrine:fixture:load  --append

pour exporter dans le projet des données d'une base : php app/console doctrine:mapping:convert yml ./src/Utilisateurs/UtilisateursBundle/Resources/config/doctrine/metadata/orm --from-database --force
pour importer en annotation : php app/console doctrine:mapping:import UtilisateursBundle annotation

pour numéroter les lignes : {{ loop.index }}

pour les contraintes pour le champs des entités :(anotation) @Assert\NotBlank(message="Ce champs doit être rempli :")
                                                       pour les mails : @Assert\Email(message="Attention adresse Email", checkMX = true)
                                                       pour me nombre de caractères : @Assert\Length(min = "2") ou (min = "2", max = "5", minMessage="Attention 2 lettres minimum ! ")
path =>pour les url
asset => pour les images
fichier .yml = YAML
~ = tilde => pour concaténer
| = pipe (pour les filtres : ex:la tva)
nl2br : pour sauter une ligne
__________________________________
JAVA

La classe java.text.DecimalFormat permet de formater une valeur numérique dans le format de son choix en utilisant un pattern dont les symboles principaux sont les suivants :

    0 permet de représenter un chiffre qui devra obligatoirement être présent, même s'il s'agit d'un zéro inutile.
    # permet de représenter un chiffre en ignorant les zéros inutiles.
    . (le point) permet de représenter le séparateur de la partie décimale.
    , (la virgule) permet de représenter le séparateur des groupes (milliers, millions, etc.).


(vous pouvez vous reporter à la documentation de la classe DecimalFormat pour obtenir la liste complète de tous les symboles).
Format 	0 	0,02 	0,8 	12,9
------------------------------------------------------
# 	0 	0 	1 	13
### 	0 	0 	1 	13
0 	0 	0 	1 	13
000 	000 	000 	001 	013
#.## 	0 	0,02 	0,8 	12,9
0.## 	0 	0,02 	0,8 	12,9
0.00 	0,00 	0,02 	0,80 	12,90
#.00 	,00 	,02 	,80 	12,90
#,##0.00 	0,00 	0,02 	0,80 	12,90

par exemple :

double ma_Valeur ;
DecimalFormat df = new DecimalFormat("#.##");
System.out.println(df.format(ma_Valeur));
-------------------------------
JOptionPane.showMessageDialog(null, "teste"); --> pour afficher une boite de dialogue
Mise en forme JLABEL : 
  Font police = new Font("Tahoma", Font.BOLD, 16);

  //On l'applique au JLabel

  label.setFont(police);

  //Changement de la couleur du texte

  label.setForeground(Color.blue);

  //On modifie l'alignement du texte grâce aux attributs statiques

  //de la classe JLabel

  label.setHorizontalAlignment(JLabel.CENTER);
